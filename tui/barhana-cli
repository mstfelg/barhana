#!/usr/bin/env python

import re

from prompt_toolkit import PromptSession
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.lexers import PygmentsLexer
from pygments.lexers.python import PythonLexer

from barhana.rules import *

DERIV_APPENDS = {
    'CLAIM': [
        'claim',
        'claim_not',
        'claim_cons',
    ],
    'ASSUME': [
        'let_not',
        'let_ante',
    ],
}

DERIV_POPS = {
    'PREMISE': [
        'claim',
        'claim_not',
        'claim_cons',
    ],
    'CLAIM': [
        'cderiv',
        'dderiv',
    ],
    'ASSUME': [
        'cderiv',
        'ideriv',
    ],
}

DERIV_PREFIX = {
    'PREMISE': 'pr',
    'CLAIM': 'cl',
    'ASSUME': 'if',
    'PROVE': 'st',
}

deriv_mode = {
    'PREMISE': [],
    'CLAIM': [],
    'ASSUME': [],
    'PROVE': [],
}

proof_stack = [('PROVE', 'Main proof'), ('PREMISE', 'Set premises')]
namespace = {}


def usage():
    """ Print help message """
    print("""
            Barhana: logical derivation engine.
            ---
            display: display a list of provided premises, claims, assumptions
                     or statements.

            help:    Show this message.
          """)


def show_deriv(query=None):
    """ List derivation status: premises, claims, assumptions, and proofs. """

    if query:
        ans = deriv_mode.get(query.upper())

        if not ans:
            ans = "Invalid mode"
        print(ans)

        return

    for mode, stat in deriv_mode.items():
        print(mode)
        print(stat)
    print('VARIABLES')
    print(namespace)
    print('PROOF STACK')
    print(proof_stack)


BUILT_INS = {
    'help': usage,
    'def': lambda x: exec(f"{x} = symbols('{x}')", globals(), namespace),
    'ls': show_deriv,
}

barhana_completer = WordCompleter([
        item for sublist in DERIV_POPS.values() for item in sublist
    ] + [
        item for sublist in DERIV_APPENDS.values() for item in sublist
    ] + list(BUILT_INS.keys()), ignore_case=True)


def update_mode(cmd, args):
    """ Updates proof_stack to pop or append """

    for mode in DERIV_POPS:
        if cmd in DERIV_POPS[mode]:
            proof_stack.pop()

            return

    for mode in DERIV_APPENDS:
        if cmd in DERIV_APPENDS[mode]:
            proof_stack.append((mode, " ".join(args)))

            return


def main():
    """ Main routine """
    session = PromptSession(lexer=PygmentsLexer(PythonLexer),
                            completer=barhana_completer)

    while True:
        try:
            cur_mode, cur_scope = proof_stack[-1]
            mode_count = str(len(deriv_mode[cur_mode]))
            lprompt = f'[ {cur_mode}{mode_count} ]: '
            inp = session.prompt(lprompt, rprompt=cur_scope)
        except KeyboardInterrupt:
            continue
        except EOFError:
            break

        arg_list = re.split(r'\s+', inp)
        arg_list = [arg for arg in arg_list if arg]
        cmd = re.match(r'(\w+)\((.*)\)', inp)

        if cmd:
            args = cmd.group(2).split(",")
            cmd = cmd.group(1)
        else:
            args = arg_list[1:]
            cmd = arg_list[0]

        if func := BUILT_INS.get(cmd):
            try:
                func(*args)
            except Exception as err:
                print("Invalid command")
                print(repr(err))

            continue

        update_mode(cmd, args)
        dvar = DERIV_PREFIX[cur_mode]
        dcount = len(deriv_mode[cur_mode])

        try:
            exec(f"{dvar}{dcount:02d} = " + inp, globals(), namespace)
            deriv_mode[cur_mode].append(inp)

        except Exception as err:
            print(repr(err))


if __name__ == '__main__':
    main()
