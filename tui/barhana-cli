#!/usr/bin/env python

import re
from enum import Enum

from prompt_toolkit import PromptSession
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.lexers import PygmentsLexer
from pygments.lexers.python import PythonLexer
from sympy.logic import boolalg

from barhana.rules import *

DERIV_CHMODE = {
    'PREMISE': [
    ],
    'CLAIM': [
        'show',
        'show_not',
        'show_cons',
    ],
    'ASSUME': [
        'let_not',
        'let_ante',
    ],
    'STATE': [
        'modp',
        'modt',
        'de_morgans',
    ],
}

DERIV_PREFIX = {
    'PREMISE': 'pr',
    'CLAIM': 'cl',
    'ASSUME': 'if',
    'STATE': 'st',
}

deriv_mode = {
    'PREMISE': [],
    'CLAIM': [],
    'ASSUME': [],
    'STATE': [],
}

cur_mode = 'PREMISE'
namespace = { }

def usage():
    """ Print help message """
    print("""
            Barhana: logical derivation engine.
            ---
            display: display a list of provided premises, claims, assumptions
                     or statements.

            help:    Show this message.
          """)

def show_deriv(query=None):
    if query:
        ans = deriv_mode.get(query.upper())
        if not ans:
            ans = "Invalid mode"
        print(ans)
        return
    for mode, stat in deriv_mode.items():
        print(mode)
        print(stat)
    print('VARIABLES')
    print(namespace)

BUILT_INS = {
    'help': usage,
    'def': lambda x: exec(f"{x} = symbols('{x}')", globals(), namespace),
    'ls': show_deriv,
}

barhana_completer = WordCompleter([
        item for sublist in DERIV_CHMODE.values() for item in sublist
    ] + list(BUILT_INS.keys()), ignore_case=True)

def main():
    """ Main routine """
    session = PromptSession(lexer=PygmentsLexer(PythonLexer),
                            completer=barhana_completer)

    while True:
        try:
            inp_count = str(len(deriv_mode[cur_mode]))
            inp = session.prompt(f'[ {cur_mode}{inp_count} ]: ')
        except KeyboardInterrupt:
            continue
        except EOFError:
            break

        arg_list = re.split(r'\s+', inp)
        arg_list = [arg for arg in arg_list if arg]

        if func := BUILT_INS.get(arg_list[0]):
            try:
                func(*arg_list[1:])
            except Exception as err:
                print("Invalid command")
                print(repr(err))

            continue

        try:
            dvar = DERIV_PREFIX[cur_mode]
            dcount = len(deriv_mode[cur_mode])
            exec(f"{dvar}{dcount:02d} = " + inp, globals(), namespace)
            deriv_mode[cur_mode].append(inp)

        except Exception as err:
            print(repr(err))

if __name__ == '__main__':
    main()
