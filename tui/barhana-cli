#!/usr/bin/env python

import re
from enum import Enum

from prompt_toolkit import PromptSession
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.lexers import PygmentsLexer
from pygments.lexers.python import PythonLexer
from sympy.logic import boolalg

from barhana.rules import *

barhana_completer = WordCompleter([
    'show',
    'show_not',
    'show_cons',
    'let_not',
    'let_ante',
    'modp',
    'modt',
    'de_morgans',
    'premises',
    ], ignore_case=True)

indent_level = 0
deriv_mode = {
    'PREMISE': [],
    'CLAIM': [],
    'ASSUME': [],
    'STATE': [],
}
cur_mode = 'PREMISE'

def usage():
    """ Print help message """
    print("""
            Barhana: logical derivation engine.
            ---
            display: display a list of provided premises, claims, assumptions
                     or statements.

            help:    Show this message.
          """)

BUILT_INS = {
    'help': usage,
    'display': lambda x: print(deriv_mode.get(x.upper()))
}

namespace = {
    '__': None
}

def main():
    """ Main routine """
    session = PromptSession(lexer=PygmentsLexer(PythonLexer),
                            completer=barhana_completer)

    while True:
        try:
            inp_count = str(len(deriv_mode[cur_mode]))
            inp = session.prompt(f'[ {cur_mode}{inp_count} ]: ')
        except KeyboardInterrupt:
            continue
        except EOFError:
            break

        arg_list = re.split(r'\s+', inp)
        arg_list = [arg for arg in arg_list if arg]

        if func := BUILT_INS.get(arg_list[0]):
            try:
                func(*arg_list[1:])
            except TypeError as err:
                print("Invalid command")
                print(repr(err))

            continue

        try:
            exec(inp, globals(), namespace)

        except Exception as err:
            print(repr(err))

if __name__ == '__main__':
    main()
